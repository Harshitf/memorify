/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MessageResponse model module.
 * @module model/MessageResponse
 * @version v0
 */
class MessageResponse {
    /**
     * Constructs a new <code>MessageResponse</code>.
     * @alias module:model/MessageResponse
     */
    constructor() { 
        
        MessageResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageResponse} obj Optional instance to populate.
     * @return {module:model/MessageResponse} The populated <code>MessageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('senderId')) {
                obj['senderId'] = ApiClient.convertToType(data['senderId'], 'String');
            }
            if (data.hasOwnProperty('receiverId')) {
                obj['receiverId'] = ApiClient.convertToType(data['receiverId'], 'String');
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'String');
            }
            if (data.hasOwnProperty('messageState')) {
                obj['messageState'] = ApiClient.convertToType(data['messageState'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], ['Blob']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['senderId'] && !(typeof data['senderId'] === 'string' || data['senderId'] instanceof String)) {
            throw new Error("Expected the field `senderId` to be a primitive type in the JSON string but got " + data['senderId']);
        }
        // ensure the json data is a string
        if (data['receiverId'] && !(typeof data['receiverId'] === 'string' || data['receiverId'] instanceof String)) {
            throw new Error("Expected the field `receiverId` to be a primitive type in the JSON string but got " + data['receiverId']);
        }
        // ensure the json data is a string
        if (data['messageType'] && !(typeof data['messageType'] === 'string' || data['messageType'] instanceof String)) {
            throw new Error("Expected the field `messageType` to be a primitive type in the JSON string but got " + data['messageType']);
        }
        // ensure the json data is a string
        if (data['messageState'] && !(typeof data['messageState'] === 'string' || data['messageState'] instanceof String)) {
            throw new Error("Expected the field `messageState` to be a primitive type in the JSON string but got " + data['messageState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['media'])) {
            throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
MessageResponse.prototype['id'] = undefined;

/**
 * @member {String} content
 */
MessageResponse.prototype['content'] = undefined;

/**
 * @member {String} senderId
 */
MessageResponse.prototype['senderId'] = undefined;

/**
 * @member {String} receiverId
 */
MessageResponse.prototype['receiverId'] = undefined;

/**
 * @member {module:model/MessageResponse.MessageTypeEnum} messageType
 */
MessageResponse.prototype['messageType'] = undefined;

/**
 * @member {module:model/MessageResponse.MessageStateEnum} messageState
 */
MessageResponse.prototype['messageState'] = undefined;

/**
 * @member {Date} createdAt
 */
MessageResponse.prototype['createdAt'] = undefined;

/**
 * @member {Array.<Blob>} media
 */
MessageResponse.prototype['media'] = undefined;





/**
 * Allowed values for the <code>messageType</code> property.
 * @enum {String}
 * @readonly
 */
MessageResponse['MessageTypeEnum'] = {

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "AUDIO"
     * @const
     */
    "AUDIO": "AUDIO",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO"
};


/**
 * Allowed values for the <code>messageState</code> property.
 * @enum {String}
 * @readonly
 */
MessageResponse['MessageStateEnum'] = {

    /**
     * value: "SENT"
     * @const
     */
    "SENT": "SENT",

    /**
     * value: "SEEN"
     * @const
     */
    "SEEN": "SEEN"
};



export default MessageResponse;

