/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatResponse from '../model/ChatResponse';

/**
* Chat service.
* @module api/ChatApi
* @version v0
*/
export default class ChatApi {

    /**
    * Constructs a new ChatApi. 
    * @alias module:api/ChatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChat operation.
     * @callback module:api/ChatApi~createChatCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} senderId 
     * @param {String} recieverId 
     * @param {module:api/ChatApi~createChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createChat(senderId, recieverId, callback) {
      let postBody = null;
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling createChat");
      }
      // verify the required parameter 'recieverId' is set
      if (recieverId === undefined || recieverId === null) {
        throw new Error("Missing the required parameter 'recieverId' when calling createChat");
      }

      let pathParams = {
      };
      let queryParams = {
        'sender-id': senderId,
        'reciever-id': recieverId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/chats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatsByReciever operation.
     * @callback module:api/ChatApi~getChatsByRecieverCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChatResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ChatApi~getChatsByRecieverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChatResponse>}
     */
    getChatsByReciever(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChatResponse];
      return this.apiClient.callApi(
        '/api/v1/chats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
