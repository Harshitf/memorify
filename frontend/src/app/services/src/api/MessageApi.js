/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageRequest from '../model/MessageRequest';
import MessageResponse from '../model/MessageResponse';

/**
* Message service.
* @module api/MessageApi
* @version v0
*/
export default class MessageApi {

    /**
    * Constructs a new MessageApi. 
    * @alias module:api/MessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/MessageApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} chatId 
     * @param {module:api/MessageApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageResponse>}
     */
    getMessages(chatId, callback) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling getMessages");
      }

      let pathParams = {
        'chat-id': chatId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MessageResponse];
      return this.apiClient.callApi(
        '/api/v1/messages/chat/{chat-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveMessage operation.
     * @callback module:api/MessageApi~saveMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/MessageRequest} messageRequest 
     * @param {module:api/MessageApi~saveMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveMessage(messageRequest, callback) {
      let postBody = messageRequest;
      // verify the required parameter 'messageRequest' is set
      if (messageRequest === undefined || messageRequest === null) {
        throw new Error("Missing the required parameter 'messageRequest' when calling saveMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMessageToSeen operation.
     * @callback module:api/MessageApi~setMessageToSeenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} chatId 
     * @param {module:api/MessageApi~setMessageToSeenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMessageToSeen(chatId, callback) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling setMessageToSeen");
      }

      let pathParams = {
      };
      let queryParams = {
        'chat-id': chatId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/messages', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMedia operation.
     * @callback module:api/MessageApi~uploadMediaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} chatId 
     * @param {File} file 
     * @param {module:api/MessageApi~uploadMediaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadMedia(chatId, file, callback) {
      let postBody = null;
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling uploadMedia");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadMedia");
      }

      let pathParams = {
      };
      let queryParams = {
        'chat-id': chatId
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/fprm-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/messages/upload-media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
