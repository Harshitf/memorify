/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WordMeaningDto from '../model/WordMeaningDto';

/**
* WordMeaningController service.
* @module api/WordMeaningControllerApi
* @version v0
*/
export default class WordMeaningControllerApi {

    /**
    * Constructs a new WordMeaningControllerApi. 
    * @alias module:api/WordMeaningControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAnswer operation.
     * @callback module:api/WordMeaningControllerApi~getAnswerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} word 
     * @param {module:api/WordMeaningControllerApi~getAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getAnswer(word, callback) {
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getAnswer");
      }

      let pathParams = {
      };
      let queryParams = {
        'word': word
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/ai', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWordMeaning operation.
     * @callback module:api/WordMeaningControllerApi~getWordMeaningCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/WordMeaningControllerApi~getWordMeaningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getWordMeaning(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveWordMeaning operation.
     * @callback module:api/WordMeaningControllerApi~saveWordMeaningCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WordMeaningDto} wordMeaningDto 
     * @param {module:api/WordMeaningControllerApi~saveWordMeaningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    saveWordMeaning(wordMeaningDto, callback) {
      let postBody = wordMeaningDto;
      // verify the required parameter 'wordMeaningDto' is set
      if (wordMeaningDto === undefined || wordMeaningDto === null) {
        throw new Error("Missing the required parameter 'wordMeaningDto' when calling saveWordMeaning");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wordMeaning operation.
     * @callback module:api/WordMeaningControllerApi~wordMeaningCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordMeaningDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/WordMeaningControllerApi~wordMeaningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordMeaningDto}
     */
    wordMeaning(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WordMeaningDto;
      return this.apiClient.callApi(
        '/word-meaning-home', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
